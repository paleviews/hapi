syntax = "proto3";

package testcase;

option go_package = "github.com/paleviews/hapi/example/testcase/apidesign/golang/testcase";

import "common/empty.proto";
import "meta/meta.proto";
import "hapi/annotations/annotations.proto";

// V1 service comment
service V1 {
  // DeepQuery rpc comment
  rpc DeepQuery(DeepQueryRequest) returns (DeepQueryResponse) {
    option (hapi.annotations.method) = {
      get: "/testcase/v1/{uuid}";
    };
  }

  rpc FormDecode(FormDecodeRequest) returns (common.Empty) {
    option (hapi.annotations.method) = {
      delete: "/testcase/v1/{uuid}";
    };
  }
}

// DeepQueryRequest message comment
message DeepQueryRequest {
  // Obj nested message comment
  message Obj {
    // parent nested field comment
    DeepQueryRequest parent = 1;
    double ratio = 2;
  }
  // uuid field comment
  string uuid = 1;
  map<string, int64> string_to_int64 = 2;
  // string_to_obj field comment on map
  map<string, Obj> string_to_obj = 3;
  repeated Obj objs_array = 4;
  Obj obj = 5;
  bool is_marked = 6;
  message RefOnce {
    // id is id
    string id = 1;
    // num is num
    sfixed32 num = 2;
  }
  // ref_once is ref_once
  RefOnce ref_once = 7;
}

message DeepQueryResponse {
  message RefOnce {
    // id is id
    string id = 1;
    // num is num
    sfixed32 num = 2;
  }
  // ref_once in response
  RefOnce ref_once = 1;
  // bs is bs
  bytes bs = 2;
  // enum out
  enum Direction {
    // one line enum
    DIRECTION_UNKNOWN = 0;
    EAST = 1;
    WEST = 2;
    // multiple lines 1
    // multiple lines 2
    // multiple lines 3
    SOUTH = 3;
    NORTH = 4;
  }
  // direction line 1
  // line 2
  // line 3
  Direction direction = 3;
}

message FormDecodeRequest {
  enum UUID {
    UUID_SHORT = 0;
    UUID_MEDIUM = 1;
    UUID_LONG = 2;
  }
  message Nested {
    string hello = 1;
    bool world = 2;
  }
  UUID uuid = 1;
  bool bool_field = 2;
  int32 int32_field = 3;
  int64 int64_field = 4;
  uint32 uint32_field = 5;
  uint64 uint64_field = 6;
  float float32_field = 7;
  double float64_field = 8;
  string string_field = 9;
  bytes bytes_field = 10;
  UUID enum_field = 11;
  Nested message_field = 12;
  map<string, uint64> simple_map = 13;
  map<string, Nested> not_simple_map = 14;
  repeated bool bool_array = 15;
  repeated int32 int32_array = 16;
  repeated int64 int64_array = 17;
  repeated uint32 uint32_array = 18;
  repeated uint64 uint64_array = 19;
  repeated float float32_array = 20;
  repeated double float64_array = 21;
  repeated string string_array = 22;
  repeated bytes bytes_array = 23;
  repeated UUID enum_array = 24;
  repeated Nested message_array = 25;
}

service V2 {
  rpc CodeInHeaders(common.Empty) returns (common.Empty) {
    option (hapi.annotations.method) = {
      put: "/testcase/v2";
    };
    option (meta.response_codes) = RESPONSE_CODE_OK;
    option (meta.response_codes) = RESPONSE_CODE_SERVER_ERROR;
  }
}
